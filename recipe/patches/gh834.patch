From cb81817015f9834ec3b60ccc6269c614d388c6e6 Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Tue, 26 May 2020 14:32:15 -0500
Subject: [PATCH 1/2] CUDA: implement fill_buffer for pattern_size<=4

---
 lib/CL/devices/cuda/pocl-cuda.c | 40 +++++++++++++++++++++++++++++++++
 1 file changed, 40 insertions(+)

diff --git a/lib/CL/devices/cuda/pocl-cuda.c b/lib/CL/devices/cuda/pocl-cuda.c
index ac5953487..315e0c269 100644
--- a/lib/CL/devices/cuda/pocl-cuda.c
+++ b/lib/CL/devices/cuda/pocl-cuda.c
@@ -523,6 +523,41 @@ pocl_cuda_submit_read (CUstream stream, void *host_ptr, const void *device_ptr,
   CUDA_CHECK (result, "cuMemcpyDtoHAsync");
 }
 
+void
+pocl_cuda_submit_memfill (CUstream stream, void *mem_ptr, size_t size_in_bytes,
+                          size_t offset, const void *pattern,
+                          size_t pattern_size)
+{
+  CUresult result;
+  switch (pattern_size)
+    {
+    case 1:
+      result
+          = cuMemsetD8Async ((CUdeviceptr) (((char *)mem_ptr) + offset),
+                             *(unsigned char *)pattern, size_in_bytes, stream);
+      break;
+    case 2:
+      result = cuMemsetD16Async ((CUdeviceptr) (((char *)mem_ptr) + offset),
+                                 *(unsigned short *)pattern, size_in_bytes / 2,
+                                 stream);
+      break;
+    case 4:
+      result = cuMemsetD32Async ((CUdeviceptr) (((char *)mem_ptr) + offset),
+                                 *(unsigned int *)pattern, size_in_bytes / 4,
+                                 stream);
+      break;
+    case 8:
+    case 16:
+    case 32:
+    case 64:
+    case 128:
+      POCL_ABORT_UNIMPLEMENTED ("fill_kernel with pattern_size >=8");
+    default:
+      POCL_ABORT ("unrecognized pattern_size");
+    }
+  CUDA_CHECK (result, "cuMemset*Async");
+}
+
 void
 pocl_cuda_submit_write (CUstream stream, const void *host_ptr,
                         void *device_ptr, size_t offset, size_t cb)
@@ -1164,6 +1199,11 @@ pocl_cuda_submit_node (_cl_command_node *node, cl_command_queue cq, int locked)
       break;
 
     case CL_COMMAND_FILL_BUFFER:
+      pocl_cuda_submit_memfill (stream, cmd->memfill.dst_mem_id->mem_ptr,
+                                cmd->memfill.size, cmd->memfill.offset,
+                                cmd->memfill.pattern,
+                                cmd->memfill.pattern_size);
+      break;
     case CL_COMMAND_READ_IMAGE:
     case CL_COMMAND_WRITE_IMAGE:
     case CL_COMMAND_COPY_IMAGE:

From c9601af8d68fbd2f414ae848fdf4f6b627b92931 Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Thu, 28 May 2020 10:36:44 -0500
Subject: [PATCH 2/2] Add test for clEnqueueFillBuffer

---
 tests/runtime/CMakeLists.txt     |   6 +-
 tests/runtime/test_fill-buffer.c | 156 +++++++++++++++++++++++++++++++
 2 files changed, 161 insertions(+), 1 deletion(-)
 create mode 100644 tests/runtime/test_fill-buffer.c

diff --git a/tests/runtime/CMakeLists.txt b/tests/runtime/CMakeLists.txt
index 5af801685..33d327797 100644
--- a/tests/runtime/CMakeLists.txt
+++ b/tests/runtime/CMakeLists.txt
@@ -30,7 +30,7 @@ set(PROGRAMS_TO_BUILD test_clFinish test_clGetDeviceInfo test_clGetEventInfo
   test_clCreateKernelsInProgram test_clCreateKernel test_clGetKernelArgInfo
   test_version test_kernel_cache_includes test_event_cycle test_link_error
   test_read-copy-write-buffer test_buffer-image-copy test_clCreateSubDevices test_event_free
-  test_enqueue_kernel_from_binary test_user_event
+  test_enqueue_kernel_from_binary test_user_event test_fill-buffer
   test_clSetMemObjectDestructorCallback)
 
 add_compile_options(${OPENCL_CFLAGS})
@@ -70,6 +70,8 @@ add_test_pocl(NAME "runtime/test_link_error" COMMAND "test_link_error")
 
 add_test_pocl(NAME "runtime/test_read-copy-write-buffer" COMMAND "test_read-copy-write-buffer")
 
+add_test_pocl(NAME "runtime/test_fill-buffer" COMMAND "test_fill-buffer")
+
 add_test_pocl(NAME "runtime/test_buffer-image-copy" COMMAND "test_buffer-image-copy")
 
 add_test_pocl(NAME "runtime/clCreateKernel" COMMAND "test_clCreateKernel")
@@ -101,6 +103,7 @@ set_tests_properties( "runtime/clGetDeviceInfo" "runtime/clEnqueueNativeKernel"
   "runtime/clCreateKernel" "runtime/clGetKernelArgInfo"
   "runtime/test_kernel_cache_includes" "runtime/test_event_cycle"
   "runtime/test_read-copy-write-buffer" "runtime/test_buffer-image-copy"
+  "runtime/test_fill-buffer"
   "runtime/test_event_free" "runtime/clCreateSubDevices"
   "runtime/test_enqueue_kernel_from_binary" "runtime/test_user_event"
   "runtime/clSetMemObjectDestructorCallback" "runtime/test_link_error"
@@ -138,6 +141,7 @@ set_property(TEST
   "runtime/test_kernel_cache_includes"
   "runtime/clFinish"
   "runtime/test_read-copy-write-buffer"
+  "runtime/test_fill-buffer"
   "runtime/test_buffer-image-copy"
   "runtime/clSetEventCallback"
   "runtime/clGetSupportedImageFormats"
diff --git a/tests/runtime/test_fill-buffer.c b/tests/runtime/test_fill-buffer.c
new file mode 100644
index 000000000..372f91323
--- /dev/null
+++ b/tests/runtime/test_fill-buffer.c
@@ -0,0 +1,156 @@
+/* Test clEnqueueFillBuffer
+
+   Copyright (C) 202o Isuru Fernando <isuruf@gmail.com>
+
+   Permission is hereby granted, free of charge, to any person obtaining a copy
+   of this software and associated documentation files (the "Software"), to
+   deal in the Software without restriction, including without limitation the
+   rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+   sell copies of the Software, and to permit persons to whom the Software is
+   furnished to do so, subject to the following conditions:
+
+   The above copyright notice and this permission notice shall be included in
+   all copies or substantial portions of the Software.
+
+   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+   IN THE SOFTWARE.
+ */
+
+#include "poclu.h"
+#include <CL/cl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define MAX_PLATFORMS 32
+#define MAX_DEVICES 32
+
+int
+main (void)
+{
+  cl_int err;
+  cl_platform_id platforms[MAX_PLATFORMS];
+  cl_uint nplatforms;
+  cl_device_id devices[MAX_DEVICES];
+  cl_uint ndevices;
+  cl_uint i, j;
+  cl_context context;
+  cl_command_queue queue;
+  cl_mem buf1;
+  cl_int max_pattern_size = 4;
+  cl_int pattern = (1 << 8) + (2 << 16) + (3 << 24);
+
+  CHECK_CL_ERROR (clGetPlatformIDs (MAX_PLATFORMS, platforms, &nplatforms));
+
+  for (i = 0; i < nplatforms; i++)
+    {
+      CHECK_CL_ERROR (clGetDeviceIDs (platforms[i], CL_DEVICE_TYPE_ALL,
+                                      MAX_DEVICES, devices, &ndevices));
+
+      /* Only test the devices we actually have room for */
+      if (ndevices > MAX_DEVICES)
+        ndevices = MAX_DEVICES;
+
+      for (j = 0; j < ndevices; j++)
+        {
+          context = clCreateContext (NULL, 1, &devices[j], NULL, NULL, &err);
+          CHECK_OPENCL_ERROR_IN ("clCreateContext");
+
+          cl_ulong alloc;
+#define MAXALLOC (1024U * 1024U)
+
+          CHECK_CL_ERROR (clGetDeviceInfo (devices[j],
+                                           CL_DEVICE_MAX_MEM_ALLOC_SIZE,
+                                           sizeof (alloc), &alloc, NULL));
+
+          while (alloc > MAXALLOC)
+            alloc /= 2;
+
+          /* ensure we are allocating a even number of elements */
+          const size_t nels
+              = (alloc / sizeof (cl_char) / (1 << max_pattern_size))
+                * (1 << max_pattern_size);
+          const size_t buf_size = nels * sizeof (cl_char);
+
+          cl_char *host_buf1 = malloc (buf_size);
+          TEST_ASSERT (host_buf1);
+
+          buf1 = clCreateBuffer (context, CL_MEM_READ_WRITE, buf_size, NULL,
+                                 &err);
+          CHECK_OPENCL_ERROR_IN ("clCreateBuffer");
+
+          for (int pattern_size = 1; pattern_size <= max_pattern_size;
+               pattern_size *= 2)
+            {
+              queue = clCreateCommandQueue (context, devices[j], 0, &err);
+              CHECK_OPENCL_ERROR_IN ("clCreateCommandQueue");
+
+              memset (host_buf1, 1, buf_size);
+
+              CHECK_CL_ERROR (clEnqueueWriteBuffer (queue, buf1, CL_TRUE, 0,
+                                                    buf_size, host_buf1, 0,
+                                                    NULL, NULL));
+
+              CHECK_CL_ERROR (clEnqueueFillBuffer (
+                  queue, buf1, (void *)&pattern, pattern_size,
+                  pattern_size * 2, buf_size - pattern_size * 3, 0, NULL,
+                  NULL));
+
+              CHECK_CL_ERROR (clEnqueueReadBuffer (queue, buf1, CL_TRUE, 0,
+                                                   buf_size, host_buf1, 0,
+                                                   NULL, NULL));
+
+              CHECK_CL_ERROR (clFinish (queue));
+              for (int i = 0; i < pattern_size * 2; i++)
+                {
+                  if (host_buf1[i] != 1)
+                    {
+                      printf ("Expected value at %d: 1, actual value: %d\n", i,
+                              host_buf1[i]);
+                      exit (1);
+                    }
+                }
+              for (int i = buf_size - pattern_size; i < buf_size; i++)
+                {
+                  if (host_buf1[i] != 1)
+                    {
+                      printf ("Expected value at %d: 1, actual value: %d\n", i,
+                              host_buf1[i]);
+                      exit (1);
+                    }
+                }
+              for (int i = pattern_size * 2; i < buf_size - pattern_size;
+                   i += pattern_size)
+                {
+                  for (int j = 0; j < pattern_size; j++)
+                    {
+                      cl_char expected_value = *((char *)&(pattern) + j);
+                      if (host_buf1[i + j] != expected_value)
+                        {
+                          printf (
+                              "Expected value at %d: %d, actual value: %d\n",
+                              i + j, expected_value, host_buf1[i + j]);
+                          exit (1);
+                        }
+                    }
+                }
+            }
+
+          memset (host_buf1, 3, buf_size);
+
+          free (host_buf1);
+          CHECK_CL_ERROR (clReleaseMemObject (buf1));
+          CHECK_CL_ERROR (clReleaseCommandQueue (queue));
+          CHECK_CL_ERROR (clReleaseContext (context));
+        }
+    }
+
+  CHECK_CL_ERROR (clUnloadCompiler ());
+
+  return EXIT_SUCCESS;
+}
