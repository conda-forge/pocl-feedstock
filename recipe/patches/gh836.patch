From c5a9f94140bfbef570cf93cf25435ab9bd8554a2 Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Tue, 26 May 2020 23:22:00 -0500
Subject: [PATCH 1/3] CUDA: Implement frexp, tgamma, ldexp

---
 lib/CL/devices/cuda/pocl-ptx-gen.cc | 10 +++++++--
 lib/kernel/cuda/CMakeLists.txt      |  2 +-
 lib/kernel/cuda/frexp.cl            | 34 +++++++++++++++++++++++++++++
 3 files changed, 43 insertions(+), 3 deletions(-)
 create mode 100644 lib/kernel/cuda/frexp.cl

diff --git a/lib/CL/devices/cuda/pocl-ptx-gen.cc b/lib/CL/devices/cuda/pocl-ptx-gen.cc
index e42bf3532..fa1b9a344 100644
--- a/lib/CL/devices/cuda/pocl-ptx-gen.cc
+++ b/lib/CL/devices/cuda/pocl-ptx-gen.cc
@@ -848,8 +848,14 @@ void mapLibDeviceCalls(llvm::Module *Module) {
     {"llvm.powi.f32", "__nv_powif"},
     {"llvm.powi.f64", "__nv_powi"},
 
-    // TODO: frexp
-    // TODO: ldexp
+    {"frexp", "__nv_frexp"},
+    {"frexpf", "__nv_frexpf"},
+
+    {"tgamma", "__nv_tgamma"},
+    {"tgammaf", "__nv_tgammaf"},
+
+    {"ldexp", "__nv_ldexp"},
+    {"ldexpf", "__nv_ldexpf"},
     // TODO: lgamma_r
     // TODO: modf
     // TODO: remquo
diff --git a/lib/kernel/cuda/CMakeLists.txt b/lib/kernel/cuda/CMakeLists.txt
index 86faefa51..9b1f69a75 100644
--- a/lib/kernel/cuda/CMakeLists.txt
+++ b/lib/kernel/cuda/CMakeLists.txt
@@ -39,7 +39,7 @@ foreach(FILE
   get_global_id.c get_global_size.c get_group_id.c
   get_local_id.c get_local_size.c get_num_groups.c
   get_global_offset.c
-  printf.c
+  printf.c frexp.cl
   wait_group_events.cl
   )
   list(REMOVE_ITEM KERNEL_SOURCES "${FILE}")
diff --git a/lib/kernel/cuda/frexp.cl b/lib/kernel/cuda/frexp.cl
new file mode 100644
index 000000000..f5149837e
--- /dev/null
+++ b/lib/kernel/cuda/frexp.cl
@@ -0,0 +1,34 @@
+/* OpenCL built-in library: frexp
+
+   Copyright (c) 2020 Isuru Fernando
+
+   Permission is hereby granted, free of charge, to any person obtaining a copy
+   of this software and associated documentation files (the "Software"), to
+   deal in the Software without restriction, including without limitation the
+   rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+   sell copies of the Software, and to permit persons to whom the Software is
+   furnished to do so, subject to the following conditions:
+
+   The above copyright notice and this permission notice shall be included in
+   all copies or substantial portions of the Software.
+
+   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+   IN THE SOFTWARE.
+*/
+
+#include "../templates.h"
+
+double __attribute__ ((overloadable)) frexp (double a, int *b)
+{
+  return __builtin_frexp (a, b);
+}
+
+float __attribute__ ((overloadable)) frexp (float a, int *b)
+{
+  return __builtin_frexpf (a, b);
+}

From 8f7ad7621c61f8af3199a348329a60d46b568bae Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Thu, 28 May 2020 02:22:54 -0500
Subject: [PATCH 2/3] Implement modf and remquo

---
 lib/CL/devices/cuda/pocl-ptx-gen.cc |   8 +-
 lib/kernel/CMakeLists.txt           |   3 +
 lib/kernel/cuda/CMakeLists.txt      |   2 +-
 lib/kernel/{cuda => }/frexp.cl      |  12 +-
 lib/kernel/modf.cl                  |  26 ++++
 lib/kernel/remquo.cl                |  26 ++++
 lib/kernel/templates.h              | 189 ++++++++++++++++++++++++++++
 7 files changed, 253 insertions(+), 13 deletions(-)
 rename lib/kernel/{cuda => }/frexp.cl (83%)
 create mode 100644 lib/kernel/modf.cl
 create mode 100644 lib/kernel/remquo.cl

diff --git a/lib/CL/devices/cuda/pocl-ptx-gen.cc b/lib/CL/devices/cuda/pocl-ptx-gen.cc
index fa1b9a344..a5d79cc05 100644
--- a/lib/CL/devices/cuda/pocl-ptx-gen.cc
+++ b/lib/CL/devices/cuda/pocl-ptx-gen.cc
@@ -856,9 +856,13 @@ void mapLibDeviceCalls(llvm::Module *Module) {
 
     {"ldexp", "__nv_ldexp"},
     {"ldexpf", "__nv_ldexpf"},
+
+    {"modf", "__nv_modf"},
+    {"modff", "__nv_modff"},
+
+    {"remquo", "__nv_remquo"},
+    {"remquof", "__nv_remquof"},
     // TODO: lgamma_r
-    // TODO: modf
-    // TODO: remquo
     // TODO: rootn
   };
   // clang-format on
diff --git a/lib/kernel/CMakeLists.txt b/lib/kernel/CMakeLists.txt
index 1f0c9cffd..f4dc177f6 100644
--- a/lib/kernel/CMakeLists.txt
+++ b/lib/kernel/CMakeLists.txt
@@ -77,6 +77,7 @@ fmax.cl
 fmin.cl
 fmod.cl
 fract.cl
+frexp.cl
 get_global_id.c
 get_global_offset.c
 get_global_size.c
@@ -116,6 +117,7 @@ mad_sat.cl
 max.cl
 max_i.cl
 maxmag.cl
+modf.cl
 min.cl
 min_i.cl
 minmag.cl
@@ -151,6 +153,7 @@ printf_base.c
 radians.cl
 recip.cl
 remainder.cl
+remquo.cl
 rhadd.cl
 rint.cl
 rootn.cl
diff --git a/lib/kernel/cuda/CMakeLists.txt b/lib/kernel/cuda/CMakeLists.txt
index 9b1f69a75..86faefa51 100644
--- a/lib/kernel/cuda/CMakeLists.txt
+++ b/lib/kernel/cuda/CMakeLists.txt
@@ -39,7 +39,7 @@ foreach(FILE
   get_global_id.c get_global_size.c get_group_id.c
   get_local_id.c get_local_size.c get_num_groups.c
   get_global_offset.c
-  printf.c frexp.cl
+  printf.c
   wait_group_events.cl
   )
   list(REMOVE_ITEM KERNEL_SOURCES "${FILE}")
diff --git a/lib/kernel/cuda/frexp.cl b/lib/kernel/frexp.cl
similarity index 83%
rename from lib/kernel/cuda/frexp.cl
rename to lib/kernel/frexp.cl
index f5149837e..3850deb9c 100644
--- a/lib/kernel/cuda/frexp.cl
+++ b/lib/kernel/frexp.cl
@@ -21,14 +21,6 @@
    IN THE SOFTWARE.
 */
 
-#include "../templates.h"
+#include "templates.h"
 
-double __attribute__ ((overloadable)) frexp (double a, int *b)
-{
-  return __builtin_frexp (a, b);
-}
-
-float __attribute__ ((overloadable)) frexp (float a, int *b)
-{
-  return __builtin_frexpf (a, b);
-}
+DEFINE_BUILTIN_V_VPJ (frexp)
diff --git a/lib/kernel/modf.cl b/lib/kernel/modf.cl
new file mode 100644
index 000000000..10c24b984
--- /dev/null
+++ b/lib/kernel/modf.cl
@@ -0,0 +1,26 @@
+/* OpenCL built-in library: modf
+
+   Copyright (c) 2020 Isuru Fernando
+
+   Permission is hereby granted, free of charge, to any person obtaining a copy
+   of this software and associated documentation files (the "Software"), to
+   deal in the Software without restriction, including without limitation the
+   rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+   sell copies of the Software, and to permit persons to whom the Software is
+   furnished to do so, subject to the following conditions:
+
+   The above copyright notice and this permission notice shall be included in
+   all copies or substantial portions of the Software.
+
+   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+   IN THE SOFTWARE.
+*/
+
+#include "templates.h"
+
+DEFINE_BUILTIN_V_VPV (modf)
diff --git a/lib/kernel/remquo.cl b/lib/kernel/remquo.cl
new file mode 100644
index 000000000..25b8e7879
--- /dev/null
+++ b/lib/kernel/remquo.cl
@@ -0,0 +1,26 @@
+/* OpenCL built-in library: remquo
+
+   Copyright (c) 2020 Isuru Fernando
+
+   Permission is hereby granted, free of charge, to any person obtaining a copy
+   of this software and associated documentation files (the "Software"), to
+   deal in the Software without restriction, including without limitation the
+   rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+   sell copies of the Software, and to permit persons to whom the Software is
+   furnished to do so, subject to the following conditions:
+
+   The above copyright notice and this permission notice shall be included in
+   all copies or substantial portions of the Software.
+
+   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+   IN THE SOFTWARE.
+*/
+
+#include "templates.h"
+
+DEFINE_BUILTIN_V_VVPJ (remquo)
diff --git a/lib/kernel/templates.h b/lib/kernel/templates.h
index fc354562c..d9fd018c9 100644
--- a/lib/kernel/templates.h
+++ b/lib/kernel/templates.h
@@ -1853,6 +1853,195 @@
   IMPLEMENT_EXPR_J_JJJ(NAME, EXPR, uint8   , uint  , uint8   , uint  )  \
   IMPLEMENT_EXPR_J_JJJ(NAME, EXPR, uint16  , uint  , uint16  , uint  )
 
+/* Defines an OpenCL builtin function for all floating point
+   gentypes and addressspaces using Clang scalar builtins. */
+#define IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE(NAME, VTYPE, ADDRSPACE)             \
+  VTYPE __attribute__ ((overloadable)) NAME (VTYPE a, ADDRSPACE VTYPE *b)     \
+  {                                                                           \
+    __private VTYPE c;                                                        \
+    __private VTYPE r = NAME (a, &c);                                         \
+    *b = c;                                                                   \
+    return r;                                                                 \
+  }
+
+#define IMPLEMENT_BUILTIN_V_VPV(NAME, VTYPE, LTYPE, HTYPE, LO, HI)            \
+  VTYPE __attribute__ ((overloadable)) NAME (VTYPE a, VTYPE *b)               \
+  {                                                                           \
+    LTYPE c = b->LO;                                                          \
+    HTYPE d = b->HI;                                                          \
+    VTYPE r = (VTYPE) (NAME (a.LO, &c), NAME (a.HI, &d));                     \
+    b->LO = c;                                                                \
+    b->HI = d;                                                                \
+    return r;                                                                 \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, VTYPE, __local)                    \
+  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, VTYPE, __global)
+#define DEFINE_BUILTIN_V_VPV(NAME)                                            \
+  __IF_FP16 (                                                                 \
+  half _CL_OVERLOADABLE _CL_READNONE NAME (half a, __private half *b)         \
+  {                                                                           \
+    /* use float builtin */                                                   \
+    __private float c;                                                        \
+    __private float r = __builtin_##NAME##f (a, &c);                          \
+    *b = c;                                                                   \
+    return r;                                                                 \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, half, __local)                     \
+  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, half, __global)                    \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, half2, half, half, lo, hi)                   \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, half3, half2, half, lo, s2)                  \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, half4, half2, half2, lo, hi)                 \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, half8, half4, half4, lo, hi)                 \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, half16, half8, half8, lo, hi))               \
+  float _CL_OVERLOADABLE _CL_READNONE NAME (float a, __private float *b)      \
+  {                                                                           \
+    return __builtin_##NAME##f (a, b);                                        \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, float, __local)                    \
+  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, float, __global)                   \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, float2, float, float, lo, hi)                \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, float3, float2, float, lo, s2)               \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, float4, float2, float2, lo, hi)              \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, float8, float4, float4, lo, hi)              \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, float16, float8, float8, lo, hi)             \
+  __IF_FP64 (                                                                 \
+  double _CL_OVERLOADABLE _CL_READNONE NAME (double a, __private double *b)   \
+  {                                                                           \
+    return __builtin_##NAME (a, b);                                           \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, double, __local)                   \
+  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, double, __global)                  \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, double2, double, double, lo, hi)             \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, double3, double2, double, lo, s2)            \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, double4, double2, double2, lo, hi)           \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, double8, double4, double4, lo, hi)           \
+  IMPLEMENT_BUILTIN_V_VPV (NAME, double16, double8, double8, lo, hi))
+
+#define IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE(NAME, VTYPE, JTYPE, ADDRSPACE)     \
+  VTYPE __attribute__ ((overloadable))                                        \
+      NAME (VTYPE a, VTYPE b, ADDRSPACE JTYPE *c)                             \
+  {                                                                           \
+    __private JTYPE d;                                                        \
+    __private VTYPE r = NAME (a, b, &d);                                      \
+    *c = d;                                                                   \
+    return r;                                                                 \
+  }
+
+#define IMPLEMENT_BUILTIN_V_VVPJ(NAME, VTYPE, JTYPE, LTYPE, HTYPE, LO, HI)    \
+  VTYPE __attribute__ ((overloadable)) NAME (VTYPE a, VTYPE b, JTYPE *c)      \
+  {                                                                           \
+    LTYPE d = c->LO;                                                          \
+    HTYPE e = c->HI;                                                          \
+    VTYPE r = (VTYPE) (NAME (a.LO, b.LO, &d), NAME (a.HI, b.HI, &e));         \
+    c->LO = d;                                                                \
+    c->HI = e;                                                                \
+    return r;                                                                 \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, VTYPE, JTYPE, __local)            \
+  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, VTYPE, JTYPE, __global)
+#define DEFINE_BUILTIN_V_VVPJ(NAME)                                           \
+  __IF_FP16 (                                                                 \
+  half _CL_OVERLOADABLE _CL_READNONE NAME (half a, half b, int *c)            \
+  {                                                                           \
+    /* use float builtin */                                                   \
+    __private int d;                                                          \
+    __private float r = __builtin_##NAME##f (a, b, &d);                       \
+    *c = d;                                                                   \
+    return r;                                                                 \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, half, int, __local)               \
+  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, half, int, __global)              \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half2, int2, int, int, lo, hi)              \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half3, int3, int2, int, lo, s2)             \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half4, int4, int2, int2, lo, hi)            \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half8, int8, int4, int4, lo, hi)            \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half16, int16, int8, int8, lo, hi))         \
+  float _CL_OVERLOADABLE _CL_READNONE NAME (float a, float b, int *c)         \
+  {                                                                           \
+    return __builtin_##NAME##f (a, b, c);                                     \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, float, int, __local)              \
+  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, float, int, __global)             \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, float2, int2, int, int, lo, hi)             \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, float3, int3, int2, int, lo, s2)            \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, float4, int4, int2, int2, lo, hi)           \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, float8, int8, int4, int4, lo, hi)           \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, float16, int16, int8, int8, lo, hi)         \
+  __IF_FP64 (                                                                 \
+  double _CL_OVERLOADABLE _CL_READNONE NAME (double a, double b, int *c)      \
+  {                                                                           \
+    return __builtin_##NAME (a, b, c);                                        \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, double, int, __local)             \
+  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, double, int, __global)            \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double2, int2, int, int, lo, hi)            \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double3, int3, int2, int, lo, s2)           \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double4, int4, int2, int2, lo, hi)          \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double8, int8, int4, int4, lo, hi)          \
+  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double16, int16, int8, int8, lo, hi))
+
+#define IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE(NAME, VTYPE, JTYPE, ADDRSPACE)      \
+  VTYPE __attribute__ ((overloadable)) NAME (VTYPE a, ADDRSPACE JTYPE *c)     \
+  {                                                                           \
+    __private JTYPE d;                                                        \
+    __private VTYPE r = NAME (a, &d);                                         \
+    *c = d;                                                                   \
+    return r;                                                                 \
+  }
+
+#define IMPLEMENT_BUILTIN_V_VPJ(NAME, VTYPE, JTYPE, LTYPE, HTYPE, LO, HI)     \
+  VTYPE __attribute__ ((overloadable)) NAME (VTYPE a, JTYPE *c)               \
+  {                                                                           \
+    LTYPE d = c->LO;                                                          \
+    HTYPE e = c->HI;                                                          \
+    VTYPE r = (VTYPE) (NAME (a.LO, &d), NAME (a.HI, &e));                     \
+    c->LO = d;                                                                \
+    c->HI = e;                                                                \
+    return r;                                                                 \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, VTYPE, JTYPE, __local)             \
+  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, VTYPE, JTYPE, __global)
+#define DEFINE_BUILTIN_V_VPJ(NAME)                                            \
+  __IF_FP16 (                                                                 \
+  half _CL_OVERLOADABLE _CL_READNONE NAME (half a, int *c)                    \
+  {                                                                           \
+    /* use float builtin */                                                   \
+    __private int d;                                                          \
+    __private float r = __builtin_##NAME##f (a, &d);                          \
+    *c = d;                                                                   \
+    return r;                                                                 \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, half, int, __local)                \
+  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, half, int, __global)               \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, half2, int2, int, int, lo, hi)               \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, half3, int3, int2, int, lo, s2)              \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, half4, int4, int2, int2, lo, hi)             \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, half8, int8, int4, int4, lo, hi)             \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, half16, int16, int8, int8, lo, hi))          \
+  float _CL_OVERLOADABLE _CL_READNONE NAME (float a, int *c)                  \
+  {                                                                           \
+    return __builtin_##NAME##f (a, c);                                        \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, float, int, __local)               \
+  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, float, int, __global)              \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, float2, int2, int, int, lo, hi)              \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, float3, int3, int2, int, lo, s2)             \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, float4, int4, int2, int2, lo, hi)            \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, float8, int8, int4, int4, lo, hi)            \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, float16, int16, int8, int8, lo, hi)          \
+  __IF_FP64 (                                                                 \
+  double _CL_OVERLOADABLE _CL_READNONE NAME (double a, int *c)                \
+  {                                                                           \
+    return __builtin_##NAME (a, c);                                           \
+  }                                                                           \
+  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, double, int, __local)              \
+  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, double, int, __global)             \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, double2, int2, int, int, lo, hi)             \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, double3, int3, int2, int, lo, s2)            \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, double4, int4, int2, int2, lo, hi)           \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, double8, int8, int4, int4, lo, hi)           \
+  IMPLEMENT_BUILTIN_V_VPJ (NAME, double16, int16, int8, int8, lo, hi))
+
 #define __SINGLE_WI                             \
     if (get_local_id(0) == 0 &&                 \
         get_local_id(1) == 0 &&                 \

From 4a8cb0357e70d5e96d3a348a85e15276b9db593f Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Thu, 28 May 2020 09:13:24 -0500
Subject: [PATCH 3/3] Enable two new tests in CUDA

---
 tests/kernel/CMakeLists.txt | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/tests/kernel/CMakeLists.txt b/tests/kernel/CMakeLists.txt
index 5e7e30d95..2f808f15e 100644
--- a/tests/kernel/CMakeLists.txt
+++ b/tests/kernel/CMakeLists.txt
@@ -272,8 +272,10 @@ set_tests_properties("kernel/test_shuffle_char"
 if(ENABLE_CUDA)
 set_property(TEST
   "kernel/test_min_max"
+  "kernel/test_ldexp"
   "kernel/test_length_distance"
   "kernel/test_fmin_fmax_fma"
+  "kernel/test_frexp_modf"
   "kernel/test_convert_sat_regression"
   "kernel/test_rotate"
   "kernel/test_short16"
