diff --git a/lib/CL/devices/pthread/CMakeLists.txt b/lib/CL/devices/pthread/CMakeLists.txt
index d8b1b0e2..137dc242 100644
--- a/lib/CL/devices/pthread/CMakeLists.txt
+++ b/lib/CL/devices/pthread/CMakeLists.txt
@@ -26,7 +26,11 @@
 if(MSVC)
   set_source_files_properties( pocl-pthread.h pthread.c pthread_scheduler.c pthread_utils.c PROPERTIES LANGUAGE CXX )
 endif(MSVC)
-add_pocl_device_library(pocl-devices-pthread pocl-pthread.h pthread.c pthread_scheduler.c pthread_utils.c)
+set(SOURCES pocl-pthread.h pthread.c pthread_scheduler.c pthread_utils.c)
+if(APPLE)
+  list(APPEND SOURCES pthread_barrier.c)
+endif(APPLE)
+add_pocl_device_library(pocl-devices-pthread ${SOURCES})
 if(ENABLE_LOADABLE_DRIVERS)
 target_link_libraries(pocl-devices-pthread PRIVATE pocl-devices-basic ${PTHREAD_LIBRARY})
 endif()
diff --git a/lib/CL/devices/pthread/pthread_barrier.c b/lib/CL/devices/pthread/pthread_barrier.c
new file mode 100644
index 00000000..bdc076dd
--- /dev/null
+++ b/lib/CL/devices/pthread/pthread_barrier.c
@@ -0,0 +1,122 @@
+/*
+ * Copyright (c) 2015, Aleksey Demakov
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * * Redistributions of source code must retain the above copyright notice, this
+ *   list of conditions and the following disclaimer.
+ * 
+ * * Redistributions in binary form must reproduce the above copyright notice,
+ *   this list of conditions and the following disclaimer in the documentation
+ *   and/or other materials provided with the distribution.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "pthread_barrier.h"
+
+#include <errno.h>
+
+#ifdef __APPLE__
+
+#define __unused __attribute__((unused))
+
+int
+pthread_barrierattr_init(pthread_barrierattr_t *attr __unused)
+{
+       return 0;
+}
+
+int
+pthread_barrierattr_destroy(pthread_barrierattr_t *attr __unused)
+{
+       return 0;
+}
+
+int
+pthread_barrierattr_getpshared(const pthread_barrierattr_t *restrict attr __unused,
+                              int *restrict pshared)
+{
+       *pshared = PTHREAD_PROCESS_PRIVATE;
+       return 0;
+}
+
+int
+pthread_barrierattr_setpshared(pthread_barrierattr_t *attr __unused,
+                              int pshared)
+{
+       if (pshared != PTHREAD_PROCESS_PRIVATE) {
+               errno = EINVAL;
+               return -1;
+       }
+       return 0;
+}
+
+int
+pthread_barrier_init(pthread_barrier_t *restrict barrier,
+                    const pthread_barrierattr_t *restrict attr __unused,
+                    unsigned count)
+{
+       if (count == 0) {
+               errno = EINVAL;
+               return -1;
+       }
+
+       if (pthread_mutex_init(&barrier->mutex, 0) < 0) {
+               return -1;
+       }
+       if (pthread_cond_init(&barrier->cond, 0) < 0) {
+               int errno_save = errno;
+               pthread_mutex_destroy(&barrier->mutex);
+               errno = errno_save;
+               return -1;
+       }
+
+       barrier->limit = count;
+       barrier->count = 0;
+       barrier->phase = 0;
+
+       return 0;
+}
+
+int
+pthread_barrier_destroy(pthread_barrier_t *barrier)
+{
+    pthread_mutex_destroy(&barrier->mutex);
+    pthread_cond_destroy(&barrier->cond);
+    return 0;
+}
+
+int
+pthread_barrier_wait(pthread_barrier_t *barrier)
+{
+       pthread_mutex_lock(&barrier->mutex);
+       barrier->count++;
+       if (barrier->count >= barrier->limit) {
+               barrier->phase++;
+               barrier->count = 0;
+               pthread_cond_broadcast(&barrier->cond);
+               pthread_mutex_unlock(&barrier->mutex);
+               return PTHREAD_BARRIER_SERIAL_THREAD;
+       } else {
+               unsigned phase = barrier->phase;
+               do
+                       pthread_cond_wait(&barrier->cond, &barrier->mutex);
+               while (phase == barrier->phase);
+               pthread_mutex_unlock(&barrier->mutex);
+               return 0;
+       }
+}
+
+#endif /* __APPLE__ */
diff --git a/lib/CL/devices/pthread/pthread_barrier.h b/lib/CL/devices/pthread/pthread_barrier.h
new file mode 100644
index 00000000..b79de04b
--- /dev/null
+++ b/lib/CL/devices/pthread/pthread_barrier.h
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2015, Aleksey Demakov
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * * Redistributions of source code must retain the above copyright notice, this
+ *   list of conditions and the following disclaimer.
+ * 
+ * * Redistributions in binary form must reproduce the above copyright notice,
+ *   this list of conditions and the following disclaimer in the documentation
+ *   and/or other materials provided with the distribution.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef PTHREAD_BARRIER_H
+#define PTHREAD_BARRIER_H
+
+#include <pthread.h>
+
+#ifdef __APPLE__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#if !defined(PTHREAD_BARRIER_SERIAL_THREAD)
+# define PTHREAD_BARRIER_SERIAL_THREAD (1)
+#endif
+
+#if !defined(PTHREAD_PROCESS_PRIVATE)
+# define PTHREAD_PROCESS_PRIVATE       (42)
+#endif
+#if !defined(PTHREAD_PROCESS_SHARED)
+# define PTHREAD_PROCESS_SHARED                (43)
+#endif
+
+typedef struct {
+} pthread_barrierattr_t;
+
+typedef struct {
+       pthread_mutex_t mutex;
+       pthread_cond_t cond;
+       unsigned int limit;
+       unsigned int count;
+       unsigned int phase;
+} pthread_barrier_t;
+
+int pthread_barrierattr_init(pthread_barrierattr_t *attr);
+int pthread_barrierattr_destroy(pthread_barrierattr_t *attr);
+
+int pthread_barrierattr_getpshared(const pthread_barrierattr_t *restrict attr,
+                                  int *restrict pshared);
+int pthread_barrierattr_setpshared(pthread_barrierattr_t *attr,
+                                  int pshared);
+
+int pthread_barrier_init(pthread_barrier_t *restrict barrier,
+                        const pthread_barrierattr_t *restrict attr,
+                        unsigned int count);
+int pthread_barrier_destroy(pthread_barrier_t *barrier);
+
+int pthread_barrier_wait(pthread_barrier_t *barrier);
+
+#ifdef  __cplusplus
+}
+#endif
+
+#endif /* __APPLE__ */
+
+#endif /* PTHREAD_BARRIER_H */
diff --git a/lib/CL/devices/pthread/pthread_scheduler.c b/lib/CL/devices/pthread/pthread_scheduler.c
index a2515085..cc40c69f 100644
--- a/lib/CL/devices/pthread/pthread_scheduler.c
+++ b/lib/CL/devices/pthread/pthread_scheduler.c
@@ -40,6 +40,9 @@
 #include "pocl_util.h"
 #include "common.h"
 #include "pocl_mem_management.h"
+#ifdef __APPLE__
+#include "pthread_barrier.h"
+#endif
 
 static void* pocl_pthread_driver_thread (void *p);
 

